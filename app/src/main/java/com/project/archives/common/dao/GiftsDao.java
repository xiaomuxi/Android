package com.project.archives.common.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Gifts".
*/
public class GiftsDao extends AbstractDao<Gifts, byte[]> {

    public static final String TABLENAME = "Gifts";

    /**
     * Properties of entity Gifts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, byte[].class, "id", true, "ID");
        public final static Property GiftHandID = new Property(1, byte[].class, "giftHandID", false, "GiftHandID");
        public final static Property GiftHandTime = new Property(2, String.class, "giftHandTime", false, "GiftHandTime");
        public final static Property GiftHandAmount = new Property(3, String.class, "giftHandAmount", false, "GiftHandAmount");
        public final static Property GiftName = new Property(4, String.class, "giftName", false, "GiftName");
        public final static Property GiftNum = new Property(5, Integer.class, "giftNum", false, "GiftNum");
        public final static Property GiftNote = new Property(6, String.class, "giftNote", false, "GiftNote");
        public final static Property IsDelete = new Property(7, Integer.class, "isDelete", false, "IsDelete");
        public final static Property AddTime = new Property(8, String.class, "addTime", false, "AddTime");
    }


    public GiftsDao(DaoConfig config) {
        super(config);
    }
    
    public GiftsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Gifts\" (" + //
                "\"ID\" BLOB PRIMARY KEY ," + // 0: id
                "\"GiftHandID\" BLOB," + // 1: giftHandID
                "\"GiftHandTime\" TEXT," + // 2: giftHandTime
                "\"GiftHandAmount\" TEXT," + // 3: giftHandAmount
                "\"GiftName\" TEXT," + // 4: giftName
                "\"GiftNum\" INTEGER," + // 5: giftNum
                "\"GiftNote\" TEXT," + // 6: giftNote
                "\"IsDelete\" INTEGER," + // 7: isDelete
                "\"AddTime\" TEXT);"); // 8: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Gifts\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Gifts entity) {
        stmt.clearBindings();
 
        byte[] id = entity.getId();
        if (id != null) {
            stmt.bindBlob(1, id);
        }
 
        byte[] giftHandID = entity.getGiftHandID();
        if (giftHandID != null) {
            stmt.bindBlob(2, giftHandID);
        }
 
        String giftHandTime = entity.getGiftHandTime();
        if (giftHandTime != null) {
            stmt.bindString(3, giftHandTime);
        }
 
        String giftHandAmount = entity.getGiftHandAmount();
        if (giftHandAmount != null) {
            stmt.bindString(4, giftHandAmount);
        }
 
        String giftName = entity.getGiftName();
        if (giftName != null) {
            stmt.bindString(5, giftName);
        }
 
        Integer giftNum = entity.getGiftNum();
        if (giftNum != null) {
            stmt.bindLong(6, giftNum);
        }
 
        String giftNote = entity.getGiftNote();
        if (giftNote != null) {
            stmt.bindString(7, giftNote);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(8, isDelete);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(9, addTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Gifts entity) {
        stmt.clearBindings();
 
        byte[] id = entity.getId();
        if (id != null) {
            stmt.bindBlob(1, id);
        }
 
        byte[] giftHandID = entity.getGiftHandID();
        if (giftHandID != null) {
            stmt.bindBlob(2, giftHandID);
        }
 
        String giftHandTime = entity.getGiftHandTime();
        if (giftHandTime != null) {
            stmt.bindString(3, giftHandTime);
        }
 
        String giftHandAmount = entity.getGiftHandAmount();
        if (giftHandAmount != null) {
            stmt.bindString(4, giftHandAmount);
        }
 
        String giftName = entity.getGiftName();
        if (giftName != null) {
            stmt.bindString(5, giftName);
        }
 
        Integer giftNum = entity.getGiftNum();
        if (giftNum != null) {
            stmt.bindLong(6, giftNum);
        }
 
        String giftNote = entity.getGiftNote();
        if (giftNote != null) {
            stmt.bindString(7, giftNote);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(8, isDelete);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(9, addTime);
        }
    }

    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    @Override
    public Gifts readEntity(Cursor cursor, int offset) {
        Gifts entity = new Gifts( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // giftHandID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // giftHandTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // giftHandAmount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // giftName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // giftNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // giftNote
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // isDelete
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Gifts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setGiftHandID(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setGiftHandTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGiftHandAmount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGiftName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGiftNum(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setGiftNote(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsDelete(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAddTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final byte[] updateKeyAfterInsert(Gifts entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public byte[] getKey(Gifts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Gifts entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
