package com.project.archives.common.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MultiDictionaries".
*/
public class MultiDictionariesDao extends AbstractDao<MultiDictionaries, byte[]> {

    public static final String TABLENAME = "MultiDictionaries";

    /**
     * Properties of entity MultiDictionaries.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, byte[].class, "ID", true, "ID");
        public final static Property OptionsName = new Property(1, String.class, "OptionsName", false, "OptionsName");
        public final static Property Type = new Property(2, Integer.class, "Type", false, "Type");
        public final static Property Sort = new Property(3, Integer.class, "Sort", false, "Sort");
        public final static Property IsDelete = new Property(4, Integer.class, "IsDelete", false, "IsDelete");
        public final static Property AddDate = new Property(5, java.util.Date.class, "AddDate", false, "AddDate");
        public final static Property AddUser = new Property(6, String.class, "AddUser", false, "AddUser");
        public final static Property UpdateDate = new Property(7, java.util.Date.class, "UpdateDate", false, "UpdateDate");
        public final static Property UpdateUser = new Property(8, String.class, "UpdateUser", false, "UpdateUser");
    }


    public MultiDictionariesDao(DaoConfig config) {
        super(config);
    }
    
    public MultiDictionariesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MultiDictionaries\" (" + //
                "\"ID\" BLOB PRIMARY KEY ," + // 0: ID
                "\"OptionsName\" TEXT," + // 1: OptionsName
                "\"Type\" INTEGER," + // 2: Type
                "\"Sort\" INTEGER," + // 3: Sort
                "\"IsDelete\" INTEGER," + // 4: IsDelete
                "\"AddDate\" INTEGER," + // 5: AddDate
                "\"AddUser\" TEXT," + // 6: AddUser
                "\"UpdateDate\" INTEGER," + // 7: UpdateDate
                "\"UpdateUser\" TEXT);"); // 8: UpdateUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MultiDictionaries\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MultiDictionaries entity) {
        stmt.clearBindings();
 
        byte[] ID = entity.getID();
        if (ID != null) {
            stmt.bindBlob(1, ID);
        }
 
        String OptionsName = entity.getOptionsName();
        if (OptionsName != null) {
            stmt.bindString(2, OptionsName);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(3, Type);
        }
 
        Integer Sort = entity.getSort();
        if (Sort != null) {
            stmt.bindLong(4, Sort);
        }
 
        Integer IsDelete = entity.getIsDelete();
        if (IsDelete != null) {
            stmt.bindLong(5, IsDelete);
        }
 
        java.util.Date AddDate = entity.getAddDate();
        if (AddDate != null) {
            stmt.bindLong(6, AddDate.getTime());
        }
 
        String AddUser = entity.getAddUser();
        if (AddUser != null) {
            stmt.bindString(7, AddUser);
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(8, UpdateDate.getTime());
        }
 
        String UpdateUser = entity.getUpdateUser();
        if (UpdateUser != null) {
            stmt.bindString(9, UpdateUser);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MultiDictionaries entity) {
        stmt.clearBindings();
 
        byte[] ID = entity.getID();
        if (ID != null) {
            stmt.bindBlob(1, ID);
        }
 
        String OptionsName = entity.getOptionsName();
        if (OptionsName != null) {
            stmt.bindString(2, OptionsName);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(3, Type);
        }
 
        Integer Sort = entity.getSort();
        if (Sort != null) {
            stmt.bindLong(4, Sort);
        }
 
        Integer IsDelete = entity.getIsDelete();
        if (IsDelete != null) {
            stmt.bindLong(5, IsDelete);
        }
 
        java.util.Date AddDate = entity.getAddDate();
        if (AddDate != null) {
            stmt.bindLong(6, AddDate.getTime());
        }
 
        String AddUser = entity.getAddUser();
        if (AddUser != null) {
            stmt.bindString(7, AddUser);
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(8, UpdateDate.getTime());
        }
 
        String UpdateUser = entity.getUpdateUser();
        if (UpdateUser != null) {
            stmt.bindString(9, UpdateUser);
        }
    }

    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    @Override
    public MultiDictionaries readEntity(Cursor cursor, int offset) {
        MultiDictionaries entity = new MultiDictionaries( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // OptionsName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Type
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Sort
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // IsDelete
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // AddDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // AddUser
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // UpdateDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // UpdateUser
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MultiDictionaries entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setOptionsName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSort(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIsDelete(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAddDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setAddUser(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdateDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUpdateUser(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final byte[] updateKeyAfterInsert(MultiDictionaries entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public byte[] getKey(MultiDictionaries entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MultiDictionaries entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
