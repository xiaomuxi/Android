package com.project.archives.common.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DutyReports".
*/
public class DutyReportsDao extends AbstractDao<DutyReports, byte[]> {

    public static final String TABLENAME = "DutyReports";

    /**
     * Properties of entity DutyReports.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, byte[].class, "id", true, "ID");
        public final static Property UserID = new Property(1, byte[].class, "userID", false, "UserID");
        public final static Property Name = new Property(2, String.class, "name", false, "Name");
        public final static Property Init = new Property(3, String.class, "init", false, "Init");
        public final static Property Position = new Property(4, String.class, "position", false, "Position");
        public final static Property DutyReportTime = new Property(5, String.class, "dutyReportTime", false, "DutyReportTime");
        public final static Property Situation = new Property(6, String.class, "situation", false, "Situation");
        public final static Property Evaluation = new Property(7, String.class, "evaluation", false, "Evaluation");
        public final static Property IsDelete = new Property(8, String.class, "isDelete", false, "IsDelete");
        public final static Property AnnexIDStr = new Property(9, String.class, "annexIDStr", false, "AnnexIDStr");
        public final static Property AddDate = new Property(10, String.class, "addDate", false, "AddDate");
        public final static Property AddUser = new Property(11, String.class, "addUser", false, "AddUser");
        public final static Property UpdateUser = new Property(12, String.class, "updateUser", false, "updateUser");
        public final static Property UpdateDate = new Property(13, String.class, "updateDate", false, "updateDate");
        public final static Property DutyReportYear = new Property(14, String.class, "dutyReportYear", false, "DutyReportYear");
        public final static Property SpecialInspectNum = new Property(15, String.class, "specialInspectNum", false, "SpecialInspectNum");
        public final static Property DiscoverProblemsNum = new Property(16, String.class, "discoverProblemsNum", false, "DiscoverProblemsNum");
        public final static Property InterviewNum = new Property(17, String.class, "interviewNum", false, "InterviewNum");
        public final static Property NewSystemNum = new Property(18, String.class, "newSystemNum", false, "NewSystemNum");
        public final static Property ClueNum = new Property(19, String.class, "clueNum", false, "ClueNum");
        public final static Property RectificationNum = new Property(20, String.class, "rectificationNum", false, "RectificationNum");
        public final static Property IsJoinMeeting = new Property(21, String.class, "isJoinMeeting", false, "IsJoinMeeting");
        public final static Property QwEvaluation = new Property(22, String.class, "qwEvaluation", false, "QWEvaluation");
        public final static Property ReviewLevel = new Property(23, String.class, "reviewLevel", false, "ReviewLevel");
        public final static Property Insufficient = new Property(24, String.class, "insufficient", false, "Insufficient");
        public final static Property OtherItem = new Property(25, String.class, "otherItem", false, "OtherItem");
    }


    public DutyReportsDao(DaoConfig config) {
        super(config);
    }
    
    public DutyReportsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DutyReports\" (" + //
                "\"ID\" BLOB PRIMARY KEY ," + // 0: id
                "\"UserID\" BLOB," + // 1: userID
                "\"Name\" TEXT," + // 2: name
                "\"Init\" TEXT," + // 3: init
                "\"Position\" TEXT," + // 4: position
                "\"DutyReportTime\" TEXT," + // 5: dutyReportTime
                "\"Situation\" TEXT," + // 6: situation
                "\"Evaluation\" TEXT," + // 7: evaluation
                "\"IsDelete\" TEXT," + // 8: isDelete
                "\"AnnexIDStr\" TEXT," + // 9: annexIDStr
                "\"AddDate\" TEXT," + // 10: addDate
                "\"AddUser\" TEXT," + // 11: addUser
                "\"updateUser\" TEXT," + // 12: updateUser
                "\"updateDate\" TEXT," + // 13: updateDate
                "\"DutyReportYear\" TEXT," + // 14: dutyReportYear
                "\"SpecialInspectNum\" TEXT," + // 15: specialInspectNum
                "\"DiscoverProblemsNum\" TEXT," + // 16: discoverProblemsNum
                "\"InterviewNum\" TEXT," + // 17: interviewNum
                "\"NewSystemNum\" TEXT," + // 18: newSystemNum
                "\"ClueNum\" TEXT," + // 19: clueNum
                "\"RectificationNum\" TEXT," + // 20: rectificationNum
                "\"IsJoinMeeting\" TEXT," + // 21: isJoinMeeting
                "\"QWEvaluation\" TEXT," + // 22: qwEvaluation
                "\"ReviewLevel\" TEXT," + // 23: reviewLevel
                "\"Insufficient\" TEXT," + // 24: insufficient
                "\"OtherItem\" TEXT);"); // 25: otherItem
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DutyReports\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DutyReports entity) {
        stmt.clearBindings();
 
        byte[] id = entity.getId();
        if (id != null) {
            stmt.bindBlob(1, id);
        }
 
        byte[] userID = entity.getUserID();
        if (userID != null) {
            stmt.bindBlob(2, userID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String init = entity.getInit();
        if (init != null) {
            stmt.bindString(4, init);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        String dutyReportTime = entity.getDutyReportTime();
        if (dutyReportTime != null) {
            stmt.bindString(6, dutyReportTime);
        }
 
        String situation = entity.getSituation();
        if (situation != null) {
            stmt.bindString(7, situation);
        }
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(8, evaluation);
        }
 
        String isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindString(9, isDelete);
        }
 
        String annexIDStr = entity.getAnnexIDStr();
        if (annexIDStr != null) {
            stmt.bindString(10, annexIDStr);
        }
 
        String addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindString(11, addDate);
        }
 
        String addUser = entity.getAddUser();
        if (addUser != null) {
            stmt.bindString(12, addUser);
        }
 
        String updateUser = entity.getUpdateUser();
        if (updateUser != null) {
            stmt.bindString(13, updateUser);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(14, updateDate);
        }
 
        String dutyReportYear = entity.getDutyReportYear();
        if (dutyReportYear != null) {
            stmt.bindString(15, dutyReportYear);
        }
 
        String specialInspectNum = entity.getSpecialInspectNum();
        if (specialInspectNum != null) {
            stmt.bindString(16, specialInspectNum);
        }
 
        String discoverProblemsNum = entity.getDiscoverProblemsNum();
        if (discoverProblemsNum != null) {
            stmt.bindString(17, discoverProblemsNum);
        }
 
        String interviewNum = entity.getInterviewNum();
        if (interviewNum != null) {
            stmt.bindString(18, interviewNum);
        }
 
        String newSystemNum = entity.getNewSystemNum();
        if (newSystemNum != null) {
            stmt.bindString(19, newSystemNum);
        }
 
        String clueNum = entity.getClueNum();
        if (clueNum != null) {
            stmt.bindString(20, clueNum);
        }
 
        String rectificationNum = entity.getRectificationNum();
        if (rectificationNum != null) {
            stmt.bindString(21, rectificationNum);
        }
 
        String isJoinMeeting = entity.getIsJoinMeeting();
        if (isJoinMeeting != null) {
            stmt.bindString(22, isJoinMeeting);
        }
 
        String qwEvaluation = entity.getQwEvaluation();
        if (qwEvaluation != null) {
            stmt.bindString(23, qwEvaluation);
        }
 
        String reviewLevel = entity.getReviewLevel();
        if (reviewLevel != null) {
            stmt.bindString(24, reviewLevel);
        }
 
        String insufficient = entity.getInsufficient();
        if (insufficient != null) {
            stmt.bindString(25, insufficient);
        }
 
        String otherItem = entity.getOtherItem();
        if (otherItem != null) {
            stmt.bindString(26, otherItem);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DutyReports entity) {
        stmt.clearBindings();
 
        byte[] id = entity.getId();
        if (id != null) {
            stmt.bindBlob(1, id);
        }
 
        byte[] userID = entity.getUserID();
        if (userID != null) {
            stmt.bindBlob(2, userID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String init = entity.getInit();
        if (init != null) {
            stmt.bindString(4, init);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        String dutyReportTime = entity.getDutyReportTime();
        if (dutyReportTime != null) {
            stmt.bindString(6, dutyReportTime);
        }
 
        String situation = entity.getSituation();
        if (situation != null) {
            stmt.bindString(7, situation);
        }
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(8, evaluation);
        }
 
        String isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindString(9, isDelete);
        }
 
        String annexIDStr = entity.getAnnexIDStr();
        if (annexIDStr != null) {
            stmt.bindString(10, annexIDStr);
        }
 
        String addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindString(11, addDate);
        }
 
        String addUser = entity.getAddUser();
        if (addUser != null) {
            stmt.bindString(12, addUser);
        }
 
        String updateUser = entity.getUpdateUser();
        if (updateUser != null) {
            stmt.bindString(13, updateUser);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(14, updateDate);
        }
 
        String dutyReportYear = entity.getDutyReportYear();
        if (dutyReportYear != null) {
            stmt.bindString(15, dutyReportYear);
        }
 
        String specialInspectNum = entity.getSpecialInspectNum();
        if (specialInspectNum != null) {
            stmt.bindString(16, specialInspectNum);
        }
 
        String discoverProblemsNum = entity.getDiscoverProblemsNum();
        if (discoverProblemsNum != null) {
            stmt.bindString(17, discoverProblemsNum);
        }
 
        String interviewNum = entity.getInterviewNum();
        if (interviewNum != null) {
            stmt.bindString(18, interviewNum);
        }
 
        String newSystemNum = entity.getNewSystemNum();
        if (newSystemNum != null) {
            stmt.bindString(19, newSystemNum);
        }
 
        String clueNum = entity.getClueNum();
        if (clueNum != null) {
            stmt.bindString(20, clueNum);
        }
 
        String rectificationNum = entity.getRectificationNum();
        if (rectificationNum != null) {
            stmt.bindString(21, rectificationNum);
        }
 
        String isJoinMeeting = entity.getIsJoinMeeting();
        if (isJoinMeeting != null) {
            stmt.bindString(22, isJoinMeeting);
        }
 
        String qwEvaluation = entity.getQwEvaluation();
        if (qwEvaluation != null) {
            stmt.bindString(23, qwEvaluation);
        }
 
        String reviewLevel = entity.getReviewLevel();
        if (reviewLevel != null) {
            stmt.bindString(24, reviewLevel);
        }
 
        String insufficient = entity.getInsufficient();
        if (insufficient != null) {
            stmt.bindString(25, insufficient);
        }
 
        String otherItem = entity.getOtherItem();
        if (otherItem != null) {
            stmt.bindString(26, otherItem);
        }
    }

    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    @Override
    public DutyReports readEntity(Cursor cursor, int offset) {
        DutyReports entity = new DutyReports( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // init
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // position
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dutyReportTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // situation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // evaluation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isDelete
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // annexIDStr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // addDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // addUser
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // updateUser
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // updateDate
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // dutyReportYear
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // specialInspectNum
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // discoverProblemsNum
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // interviewNum
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // newSystemNum
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // clueNum
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // rectificationNum
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // isJoinMeeting
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // qwEvaluation
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // reviewLevel
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // insufficient
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // otherItem
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DutyReports entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosition(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDutyReportTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSituation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEvaluation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsDelete(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAnnexIDStr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddUser(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdateUser(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUpdateDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDutyReportYear(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSpecialInspectNum(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDiscoverProblemsNum(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setInterviewNum(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNewSystemNum(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setClueNum(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRectificationNum(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIsJoinMeeting(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setQwEvaluation(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setReviewLevel(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setInsufficient(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOtherItem(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final byte[] updateKeyAfterInsert(DutyReports entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public byte[] getKey(DutyReports entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DutyReports entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
