package com.project.archives.common.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GiftHands".
*/
public class GiftHandsDao extends AbstractDao<GiftHands, byte[]> {

    public static final String TABLENAME = "GiftHands";

    /**
     * Properties of entity GiftHands.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, byte[].class, "id", true, "ID");
        public final static Property UserID = new Property(1, byte[].class, "userID", false, "UserID");
        public final static Property Name = new Property(2, String.class, "name", false, "Name");
        public final static Property Init = new Property(3, String.class, "init", false, "Init");
        public final static Property Position = new Property(4, String.class, "position", false, "Position");
        public final static Property Rank = new Property(5, Integer.class, "rank", false, "Rank");
        public final static Property IsDelete = new Property(6, Integer.class, "isDelete", false, "IsDelete");
        public final static Property AddDate = new Property(7, String.class, "addDate", false, "AddDate");
        public final static Property AddUser = new Property(8, String.class, "addUser", false, "AddUser");
        public final static Property UpdateDate = new Property(9, String.class, "updateDate", false, "UpdateDate");
        public final static Property UpdateUser = new Property(10, String.class, "updateUser", false, "UpdateUser");
    }


    public GiftHandsDao(DaoConfig config) {
        super(config);
    }
    
    public GiftHandsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GiftHands\" (" + //
                "\"ID\" BLOB PRIMARY KEY ," + // 0: id
                "\"UserID\" BLOB," + // 1: userID
                "\"Name\" TEXT," + // 2: name
                "\"Init\" TEXT," + // 3: init
                "\"Position\" TEXT," + // 4: position
                "\"Rank\" INTEGER," + // 5: rank
                "\"IsDelete\" INTEGER," + // 6: isDelete
                "\"AddDate\" TEXT," + // 7: addDate
                "\"AddUser\" TEXT," + // 8: addUser
                "\"UpdateDate\" TEXT," + // 9: updateDate
                "\"UpdateUser\" TEXT);"); // 10: updateUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GiftHands\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GiftHands entity) {
        stmt.clearBindings();
 
        byte[] id = entity.getId();
        if (id != null) {
            stmt.bindBlob(1, id);
        }
 
        byte[] userID = entity.getUserID();
        if (userID != null) {
            stmt.bindBlob(2, userID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String init = entity.getInit();
        if (init != null) {
            stmt.bindString(4, init);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        Integer rank = entity.getRank();
        if (rank != null) {
            stmt.bindLong(6, rank);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(7, isDelete);
        }
 
        String addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindString(8, addDate);
        }
 
        String addUser = entity.getAddUser();
        if (addUser != null) {
            stmt.bindString(9, addUser);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(10, updateDate);
        }
 
        String updateUser = entity.getUpdateUser();
        if (updateUser != null) {
            stmt.bindString(11, updateUser);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GiftHands entity) {
        stmt.clearBindings();
 
        byte[] id = entity.getId();
        if (id != null) {
            stmt.bindBlob(1, id);
        }
 
        byte[] userID = entity.getUserID();
        if (userID != null) {
            stmt.bindBlob(2, userID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String init = entity.getInit();
        if (init != null) {
            stmt.bindString(4, init);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        Integer rank = entity.getRank();
        if (rank != null) {
            stmt.bindLong(6, rank);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(7, isDelete);
        }
 
        String addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindString(8, addDate);
        }
 
        String addUser = entity.getAddUser();
        if (addUser != null) {
            stmt.bindString(9, addUser);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(10, updateDate);
        }
 
        String updateUser = entity.getUpdateUser();
        if (updateUser != null) {
            stmt.bindString(11, updateUser);
        }
    }

    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    @Override
    public GiftHands readEntity(Cursor cursor, int offset) {
        GiftHands entity = new GiftHands( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // init
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // position
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // rank
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isDelete
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // addDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // addUser
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // updateDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // updateUser
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GiftHands entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosition(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRank(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsDelete(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAddDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddUser(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdateUser(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final byte[] updateKeyAfterInsert(GiftHands entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public byte[] getKey(GiftHands entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GiftHands entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
