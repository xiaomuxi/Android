package com.project.archives.common.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CaseInves".
*/
public class CaseInvesDao extends AbstractDao<CaseInves, byte[]> {

    public static final String TABLENAME = "CaseInves";

    /**
     * Properties of entity CaseInves.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, byte[].class, "ID", true, "ID");
        public final static Property UserID = new Property(1, byte[].class, "UserID", false, "UserID");
        public final static Property Name = new Property(2, String.class, "Name", false, "Name");
        public final static Property Init = new Property(3, String.class, "Init", false, "Init");
        public final static Property Position = new Property(4, String.class, "Position", false, "Position");
        public final static Property Rank = new Property(5, Integer.class, "Rank", false, "Rank");
        public final static Property Coding = new Property(6, Integer.class, "Coding", false, "Coding");
        public final static Property IsPcongress = new Property(7, Integer.class, "IsPcongress", false, "IsPcongress");
        public final static Property IsMember = new Property(8, Integer.class, "IsMember", false, "IsMember");
        public final static Property IsObject = new Property(9, Integer.class, "IsObject", false, "IsObject");
        public final static Property IsOfficer = new Property(10, Integer.class, "IsOfficer", false, "IsOfficer");
        public final static Property IsPartyMember = new Property(11, Integer.class, "IsPartyMember", false, "IsPartyMember");
        public final static Property Facts = new Property(12, String.class, "Facts", false, "Facts");
        public final static Property Discipline = new Property(13, byte[].class, "Discipline", false, "Discipline");
        public final static Property Organ = new Property(14, Integer.class, "Organ", false, "Organ");
        public final static Property PutTime = new Property(15, java.util.Date.class, "PutTime", false, "PutTime");
        public final static Property OutTime = new Property(16, java.util.Date.class, "OutTime", false, "OutTime");
        public final static Property SurveyContent = new Property(17, String.class, "SurveyContent", false, "SurveyContent");
        public final static Property DisTypeD = new Property(18, Integer.class, "DisTypeD", false, "DisTypeD");
        public final static Property Note = new Property(19, String.class, "Note", false, "Note");
        public final static Property AnnexIDStr = new Property(20, byte[].class, "AnnexIDStr", false, "AnnexIDStr");
        public final static Property IsDelete = new Property(21, Integer.class, "isDelete", false, "isDelete");
        public final static Property AddDate = new Property(22, java.util.Date.class, "AddDate", false, "AddDate");
        public final static Property AddUser = new Property(23, String.class, "AddUser", false, "AddUser");
        public final static Property UpdateDate = new Property(24, java.util.Date.class, "UpdateDate", false, "UpdateDate");
        public final static Property UpdateUser = new Property(25, String.class, "UpdateUser", false, "UpdateUser");
        public final static Property PoliticsStatus = new Property(26, String.class, "PoliticsStatus", false, "PoliticsStatus");
        public final static Property Organization = new Property(27, Integer.class, "Organization", false, "Organization");
        public final static Property Xiansou = new Property(28, Integer.class, "Xiansou", false, "Xiansou");
        public final static Property ShouTime = new Property(29, java.util.Date.class, "ShouTime", false, "ShouTime");
        public final static Property Trail = new Property(30, String.class, "Trail", false, "Trail");
        public final static Property Description = new Property(31, String.class, "Description", false, "Description");
        public final static Property ChuheTime = new Property(32, java.util.Date.class, "ChuheTime", false, "ChuheTime");
        public final static Property LiaojieTime = new Property(33, java.util.Date.class, "LiaojieTime", false, "LiaojieTime");
    }


    public CaseInvesDao(DaoConfig config) {
        super(config);
    }
    
    public CaseInvesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CaseInves\" (" + //
                "\"ID\" BLOB PRIMARY KEY ," + // 0: ID
                "\"UserID\" BLOB," + // 1: UserID
                "\"Name\" TEXT," + // 2: Name
                "\"Init\" TEXT," + // 3: Init
                "\"Position\" TEXT," + // 4: Position
                "\"Rank\" INTEGER," + // 5: Rank
                "\"Coding\" INTEGER," + // 6: Coding
                "\"IsPcongress\" INTEGER," + // 7: IsPcongress
                "\"IsMember\" INTEGER," + // 8: IsMember
                "\"IsObject\" INTEGER," + // 9: IsObject
                "\"IsOfficer\" INTEGER," + // 10: IsOfficer
                "\"IsPartyMember\" INTEGER," + // 11: IsPartyMember
                "\"Facts\" TEXT," + // 12: Facts
                "\"Discipline\" BLOB," + // 13: Discipline
                "\"Organ\" INTEGER," + // 14: Organ
                "\"PutTime\" INTEGER," + // 15: PutTime
                "\"OutTime\" INTEGER," + // 16: OutTime
                "\"SurveyContent\" TEXT," + // 17: SurveyContent
                "\"DisTypeD\" INTEGER," + // 18: DisTypeD
                "\"Note\" TEXT," + // 19: Note
                "\"AnnexIDStr\" BLOB," + // 20: AnnexIDStr
                "\"isDelete\" INTEGER," + // 21: isDelete
                "\"AddDate\" INTEGER," + // 22: AddDate
                "\"AddUser\" TEXT," + // 23: AddUser
                "\"UpdateDate\" INTEGER," + // 24: UpdateDate
                "\"UpdateUser\" TEXT," + // 25: UpdateUser
                "\"PoliticsStatus\" TEXT," + // 26: PoliticsStatus
                "\"Organization\" INTEGER," + // 27: Organization
                "\"Xiansou\" INTEGER," + // 28: Xiansou
                "\"ShouTime\" INTEGER," + // 29: ShouTime
                "\"Trail\" TEXT," + // 30: Trail
                "\"Description\" TEXT," + // 31: Description
                "\"ChuheTime\" INTEGER," + // 32: ChuheTime
                "\"LiaojieTime\" INTEGER);"); // 33: LiaojieTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CaseInves\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CaseInves entity) {
        stmt.clearBindings();
 
        byte[] ID = entity.getID();
        if (ID != null) {
            stmt.bindBlob(1, ID);
        }
 
        byte[] UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindBlob(2, UserID);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Init = entity.getInit();
        if (Init != null) {
            stmt.bindString(4, Init);
        }
 
        String Position = entity.getPosition();
        if (Position != null) {
            stmt.bindString(5, Position);
        }
 
        Integer Rank = entity.getRank();
        if (Rank != null) {
            stmt.bindLong(6, Rank);
        }
 
        Integer Coding = entity.getCoding();
        if (Coding != null) {
            stmt.bindLong(7, Coding);
        }
 
        Integer IsPcongress = entity.getIsPcongress();
        if (IsPcongress != null) {
            stmt.bindLong(8, IsPcongress);
        }
 
        Integer IsMember = entity.getIsMember();
        if (IsMember != null) {
            stmt.bindLong(9, IsMember);
        }
 
        Integer IsObject = entity.getIsObject();
        if (IsObject != null) {
            stmt.bindLong(10, IsObject);
        }
 
        Integer IsOfficer = entity.getIsOfficer();
        if (IsOfficer != null) {
            stmt.bindLong(11, IsOfficer);
        }
 
        Integer IsPartyMember = entity.getIsPartyMember();
        if (IsPartyMember != null) {
            stmt.bindLong(12, IsPartyMember);
        }
 
        String Facts = entity.getFacts();
        if (Facts != null) {
            stmt.bindString(13, Facts);
        }
 
        byte[] Discipline = entity.getDiscipline();
        if (Discipline != null) {
            stmt.bindBlob(14, Discipline);
        }
 
        Integer Organ = entity.getOrgan();
        if (Organ != null) {
            stmt.bindLong(15, Organ);
        }
 
        java.util.Date PutTime = entity.getPutTime();
        if (PutTime != null) {
            stmt.bindLong(16, PutTime.getTime());
        }
 
        java.util.Date OutTime = entity.getOutTime();
        if (OutTime != null) {
            stmt.bindLong(17, OutTime.getTime());
        }
 
        String SurveyContent = entity.getSurveyContent();
        if (SurveyContent != null) {
            stmt.bindString(18, SurveyContent);
        }
 
        Integer DisTypeD = entity.getDisTypeD();
        if (DisTypeD != null) {
            stmt.bindLong(19, DisTypeD);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(20, Note);
        }
 
        byte[] AnnexIDStr = entity.getAnnexIDStr();
        if (AnnexIDStr != null) {
            stmt.bindBlob(21, AnnexIDStr);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(22, isDelete);
        }
 
        java.util.Date AddDate = entity.getAddDate();
        if (AddDate != null) {
            stmt.bindLong(23, AddDate.getTime());
        }
 
        String AddUser = entity.getAddUser();
        if (AddUser != null) {
            stmt.bindString(24, AddUser);
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(25, UpdateDate.getTime());
        }
 
        String UpdateUser = entity.getUpdateUser();
        if (UpdateUser != null) {
            stmt.bindString(26, UpdateUser);
        }
 
        String PoliticsStatus = entity.getPoliticsStatus();
        if (PoliticsStatus != null) {
            stmt.bindString(27, PoliticsStatus);
        }
 
        Integer Organization = entity.getOrganization();
        if (Organization != null) {
            stmt.bindLong(28, Organization);
        }
 
        Integer Xiansou = entity.getXiansou();
        if (Xiansou != null) {
            stmt.bindLong(29, Xiansou);
        }
 
        java.util.Date ShouTime = entity.getShouTime();
        if (ShouTime != null) {
            stmt.bindLong(30, ShouTime.getTime());
        }
 
        String Trail = entity.getTrail();
        if (Trail != null) {
            stmt.bindString(31, Trail);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(32, Description);
        }
 
        java.util.Date ChuheTime = entity.getChuheTime();
        if (ChuheTime != null) {
            stmt.bindLong(33, ChuheTime.getTime());
        }
 
        java.util.Date LiaojieTime = entity.getLiaojieTime();
        if (LiaojieTime != null) {
            stmt.bindLong(34, LiaojieTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CaseInves entity) {
        stmt.clearBindings();
 
        byte[] ID = entity.getID();
        if (ID != null) {
            stmt.bindBlob(1, ID);
        }
 
        byte[] UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindBlob(2, UserID);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Init = entity.getInit();
        if (Init != null) {
            stmt.bindString(4, Init);
        }
 
        String Position = entity.getPosition();
        if (Position != null) {
            stmt.bindString(5, Position);
        }
 
        Integer Rank = entity.getRank();
        if (Rank != null) {
            stmt.bindLong(6, Rank);
        }
 
        Integer Coding = entity.getCoding();
        if (Coding != null) {
            stmt.bindLong(7, Coding);
        }
 
        Integer IsPcongress = entity.getIsPcongress();
        if (IsPcongress != null) {
            stmt.bindLong(8, IsPcongress);
        }
 
        Integer IsMember = entity.getIsMember();
        if (IsMember != null) {
            stmt.bindLong(9, IsMember);
        }
 
        Integer IsObject = entity.getIsObject();
        if (IsObject != null) {
            stmt.bindLong(10, IsObject);
        }
 
        Integer IsOfficer = entity.getIsOfficer();
        if (IsOfficer != null) {
            stmt.bindLong(11, IsOfficer);
        }
 
        Integer IsPartyMember = entity.getIsPartyMember();
        if (IsPartyMember != null) {
            stmt.bindLong(12, IsPartyMember);
        }
 
        String Facts = entity.getFacts();
        if (Facts != null) {
            stmt.bindString(13, Facts);
        }
 
        byte[] Discipline = entity.getDiscipline();
        if (Discipline != null) {
            stmt.bindBlob(14, Discipline);
        }
 
        Integer Organ = entity.getOrgan();
        if (Organ != null) {
            stmt.bindLong(15, Organ);
        }
 
        java.util.Date PutTime = entity.getPutTime();
        if (PutTime != null) {
            stmt.bindLong(16, PutTime.getTime());
        }
 
        java.util.Date OutTime = entity.getOutTime();
        if (OutTime != null) {
            stmt.bindLong(17, OutTime.getTime());
        }
 
        String SurveyContent = entity.getSurveyContent();
        if (SurveyContent != null) {
            stmt.bindString(18, SurveyContent);
        }
 
        Integer DisTypeD = entity.getDisTypeD();
        if (DisTypeD != null) {
            stmt.bindLong(19, DisTypeD);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(20, Note);
        }
 
        byte[] AnnexIDStr = entity.getAnnexIDStr();
        if (AnnexIDStr != null) {
            stmt.bindBlob(21, AnnexIDStr);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(22, isDelete);
        }
 
        java.util.Date AddDate = entity.getAddDate();
        if (AddDate != null) {
            stmt.bindLong(23, AddDate.getTime());
        }
 
        String AddUser = entity.getAddUser();
        if (AddUser != null) {
            stmt.bindString(24, AddUser);
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(25, UpdateDate.getTime());
        }
 
        String UpdateUser = entity.getUpdateUser();
        if (UpdateUser != null) {
            stmt.bindString(26, UpdateUser);
        }
 
        String PoliticsStatus = entity.getPoliticsStatus();
        if (PoliticsStatus != null) {
            stmt.bindString(27, PoliticsStatus);
        }
 
        Integer Organization = entity.getOrganization();
        if (Organization != null) {
            stmt.bindLong(28, Organization);
        }
 
        Integer Xiansou = entity.getXiansou();
        if (Xiansou != null) {
            stmt.bindLong(29, Xiansou);
        }
 
        java.util.Date ShouTime = entity.getShouTime();
        if (ShouTime != null) {
            stmt.bindLong(30, ShouTime.getTime());
        }
 
        String Trail = entity.getTrail();
        if (Trail != null) {
            stmt.bindString(31, Trail);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(32, Description);
        }
 
        java.util.Date ChuheTime = entity.getChuheTime();
        if (ChuheTime != null) {
            stmt.bindLong(33, ChuheTime.getTime());
        }
 
        java.util.Date LiaojieTime = entity.getLiaojieTime();
        if (LiaojieTime != null) {
            stmt.bindLong(34, LiaojieTime.getTime());
        }
    }

    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0);
    }    

    @Override
    public CaseInves readEntity(Cursor cursor, int offset) {
        CaseInves entity = new CaseInves( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // UserID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Init
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Position
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Rank
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // Coding
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // IsPcongress
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // IsMember
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // IsObject
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // IsOfficer
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // IsPartyMember
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Facts
            cursor.isNull(offset + 13) ? null : cursor.getBlob(offset + 13), // Discipline
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // Organ
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // PutTime
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // OutTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // SurveyContent
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // DisTypeD
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Note
            cursor.isNull(offset + 20) ? null : cursor.getBlob(offset + 20), // AnnexIDStr
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // isDelete
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // AddDate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // AddUser
            cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)), // UpdateDate
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // UpdateUser
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // PoliticsStatus
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // Organization
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // Xiansou
            cursor.isNull(offset + 29) ? null : new java.util.Date(cursor.getLong(offset + 29)), // ShouTime
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // Trail
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // Description
            cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)), // ChuheTime
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)) // LiaojieTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CaseInves entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosition(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRank(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCoding(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsPcongress(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsMember(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsObject(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIsOfficer(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIsPartyMember(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setFacts(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDiscipline(cursor.isNull(offset + 13) ? null : cursor.getBlob(offset + 13));
        entity.setOrgan(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setPutTime(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setOutTime(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setSurveyContent(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDisTypeD(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setNote(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAnnexIDStr(cursor.isNull(offset + 20) ? null : cursor.getBlob(offset + 20));
        entity.setIsDelete(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setAddDate(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setAddUser(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setUpdateDate(cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)));
        entity.setUpdateUser(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPoliticsStatus(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setOrganization(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setXiansou(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setShouTime(cursor.isNull(offset + 29) ? null : new java.util.Date(cursor.getLong(offset + 29)));
        entity.setTrail(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setDescription(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setChuheTime(cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)));
        entity.setLiaojieTime(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
     }
    
    @Override
    protected final byte[] updateKeyAfterInsert(CaseInves entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public byte[] getKey(CaseInves entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CaseInves entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
